// <auto-generated />
using System;
using BlogApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250414074028_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogApp.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Teknoloji dünyasındaki son gelişmeler...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "İlk Teknoloji Blogu",
                            Type = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "Paris'te gezilecek yerler ve deneyimler...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Seyahat Notları: Paris",
                            Type = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Content = "Evde kolayca yapabileceğiniz harika tarifler...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "En Lezzetli Yemek Tarifleri",
                            Type = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Content = "Son moda trendleri ve kombin önerileri...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yeni Moda Akımları",
                            Type = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Content = "Sağlıklı beslenme ve egzersiz ipuçları...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Sağlıklı Yaşam Sırları",
                            Type = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Content = "Son spor olayları ve gelişmeler...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spor Dünyasından Haberler",
                            Type = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Content = "Otomobil sektöründeki son yenilikler...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "En Yeni Otomobil Modelleri",
                            Type = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Content = "Sinema dünyasından en iyi yapımlar...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kaçırılmaması Gereken Filmler",
                            Type = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Content = "Farklı türlerde müzik zevkine hitap eden listeler...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müzik Listeleri ve Öneriler",
                            Type = 0,
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Content = "Edebiyat dünyasından seçkin eserler...",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Okunması Gereken Kitaplar",
                            Type = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Seyahat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yemek"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moda"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sağlık"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Otomobil"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sinema"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Müzik"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Kitap"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Bilim"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Sanat"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Tarih"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ekonomi"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Eğitim"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Oyun"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Fotoğrafçılık"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Bahçe"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Evcil Hayvan"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Felsefe"
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfanityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            CreatedDate = new DateTime(2025, 4, 5, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu teknoloji yazısı çok bilgilendiriciydi!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 1,
                            CreatedDate = new DateTime(2025, 4, 5, 11, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Katılıyorum, teşekkürler!",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 2,
                            CreatedDate = new DateTime(2025, 4, 10, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Paris'e gitmek istiyorum, harika fotoğraflar!",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 2,
                            CreatedDate = new DateTime(2025, 4, 10, 12, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Ben de gitmek istiyorum!",
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 3,
                            CreatedDate = new DateTime(2025, 4, 13, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Tarif için teşekkürler, deneyeceğim.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            BlogId = 3,
                            CreatedDate = new DateTime(2025, 4, 13, 13, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Ellerinize sağlık çok güzel görünüyor.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            BlogId = 4,
                            CreatedDate = new DateTime(2025, 4, 1, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Moda ile ilgili daha fazla içerik bekliyoruz.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            BlogId = 4,
                            CreatedDate = new DateTime(2025, 4, 1, 10, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Kesinlikle çok güzel kombinler.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            BlogId = 5,
                            CreatedDate = new DateTime(2025, 4, 7, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu sağlıklı yaşam önerileri harika!",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            BlogId = 5,
                            CreatedDate = new DateTime(2025, 4, 7, 11, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Sağlıklı beslenme çok önemli.",
                            UserId = 3
                        },
                        new
                        {
                            Id = 11,
                            BlogId = 6,
                            CreatedDate = new DateTime(2025, 4, 12, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Spor haberleri için teşekkürler.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            BlogId = 6,
                            CreatedDate = new DateTime(2025, 4, 12, 14, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Hangi takımı destekliyorsunuz?",
                            UserId = 4
                        },
                        new
                        {
                            Id = 13,
                            BlogId = 7,
                            CreatedDate = new DateTime(2025, 3, 26, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu otomobil modelleri harika.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 14,
                            BlogId = 7,
                            CreatedDate = new DateTime(2025, 3, 26, 12, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Fiyatları hakkında bilgi var mı?",
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            BlogId = 8,
                            CreatedDate = new DateTime(2025, 4, 3, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu filmleri izleyeceğim.",
                            UserId = 3
                        },
                        new
                        {
                            Id = 16,
                            BlogId = 8,
                            CreatedDate = new DateTime(2025, 4, 3, 10, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Sinema keyfi başlıyor.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            BlogId = 9,
                            CreatedDate = new DateTime(2025, 4, 9, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Müzik listeleri çok iyi.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 18,
                            BlogId = 9,
                            CreatedDate = new DateTime(2025, 4, 9, 11, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Yeni şarkılar keşfettim.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            BlogId = 10,
                            CreatedDate = new DateTime(2025, 4, 14, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu kitapları okumalıyım.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 20,
                            BlogId = 10,
                            CreatedDate = new DateTime(2025, 4, 14, 3, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Kitap önerisi için teşekkürler.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 21,
                            BlogId = 1,
                            CreatedDate = new DateTime(2025, 4, 6, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu yazı çok kötüydü!",
                            UserId = 3
                        },
                        new
                        {
                            Id = 22,
                            BlogId = 1,
                            CreatedDate = new DateTime(2025, 4, 6, 10, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Katılmıyorum, bence harikaydı.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 23,
                            BlogId = 2,
                            CreatedDate = new DateTime(2025, 4, 11, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Paris pahalı bir şehir mi?",
                            UserId = 5
                        },
                        new
                        {
                            Id = 24,
                            BlogId = 2,
                            CreatedDate = new DateTime(2025, 4, 11, 13, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Evet, biraz pahalı ama değer.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 25,
                            BlogId = 3,
                            CreatedDate = new DateTime(2025, 4, 14, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu tarifi denedim, harika oldu!",
                            UserId = 3
                        },
                        new
                        {
                            Id = 26,
                            BlogId = 3,
                            CreatedDate = new DateTime(2025, 4, 14, 7, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Hangi malzemeleri kullandınız?",
                            UserId = 5
                        },
                        new
                        {
                            Id = 27,
                            BlogId = 4,
                            CreatedDate = new DateTime(2025, 4, 1, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu moda akımı çok garip.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 28,
                            BlogId = 4,
                            CreatedDate = new DateTime(2025, 4, 1, 11, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bence çok şık.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 29,
                            BlogId = 5,
                            CreatedDate = new DateTime(2025, 4, 8, 9, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Bu öneriler işe yarıyor mu?",
                            UserId = 2
                        },
                        new
                        {
                            Id = 30,
                            BlogId = 5,
                            CreatedDate = new DateTime(2025, 4, 8, 10, 56, 0, 0, DateTimeKind.Unspecified),
                            ProfanityStatus = 0,
                            Text = "Evet, düzenli uyguluyorum.",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Like", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.SavedBlog", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("SavedBlogs");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Ahmet",
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 137, 158, 165, 199, 11, 117, 125, 202, 100, 132, 120, 19, 145, 150, 101, 144, 127, 228, 122, 112, 170, 196, 169, 126, 116, 181, 146, 183, 179, 151, 196, 118, 135, 235, 166, 227, 172, 143, 120, 122, 151, 191, 158, 123, 118, 171, 193, 132, 10, 188, 167, 106, 142, 136, 173, 149, 197, 184, 110, 195, 169, 175, 141, 115 },
                            PasswordSalt = new byte[] { 112, 15, 203, 179, 125, 186, 183, 189, 205, 119, 165, 183, 185, 214, 109, 130, 14, 105, 139, 164, 197, 153, 143, 194, 108, 196, 133, 127, 120, 173, 150, 101, 188, 154, 188, 11, 166, 162, 11, 104, 142, 177, 134, 167, 135, 118, 158, 116, 107, 110, 197, 153, 148, 106, 156, 247, 190, 148, 146, 187, 128, 181, 145, 144 },
                            UserTypeId = 1,
                            Username = "yazar1"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Ayşe",
                            LastName = "Demir",
                            PasswordHash = new byte[] { 137, 158, 165, 199, 11, 117, 125, 202, 100, 132, 120, 19, 145, 150, 101, 144, 127, 228, 122, 112, 170, 196, 169, 126, 116, 181, 146, 183, 179, 151, 196, 118, 135, 235, 166, 227, 172, 143, 120, 122, 151, 191, 158, 123, 118, 171, 193, 132, 10, 188, 167, 106, 142, 136, 173, 149, 197, 184, 110, 195, 169, 175, 141, 115 },
                            PasswordSalt = new byte[] { 112, 15, 203, 179, 125, 186, 183, 189, 205, 119, 165, 183, 185, 214, 109, 130, 14, 105, 139, 164, 197, 153, 143, 194, 108, 196, 133, 127, 120, 173, 150, 101, 188, 154, 188, 11, 166, 162, 11, 104, 142, 177, 134, 167, 135, 118, 158, 116, 107, 110, 197, 153, 148, 106, 156, 247, 190, 148, 146, 187, 128, 181, 145, 144 },
                            UserTypeId = 1,
                            Username = "yazar2"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Mehmet",
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 137, 158, 165, 199, 11, 117, 125, 202, 100, 132, 120, 19, 145, 150, 101, 144, 127, 228, 122, 112, 170, 196, 169, 126, 116, 181, 146, 183, 179, 151, 196, 118, 135, 235, 166, 227, 172, 143, 120, 122, 151, 191, 158, 123, 118, 171, 193, 132, 10, 188, 167, 106, 142, 136, 173, 149, 197, 184, 110, 195, 169, 175, 141, 115 },
                            PasswordSalt = new byte[] { 112, 15, 203, 179, 125, 186, 183, 189, 205, 119, 165, 183, 185, 214, 109, 130, 14, 105, 139, 164, 197, 153, 143, 194, 108, 196, 133, 127, 120, 173, 150, 101, 188, 154, 188, 11, 166, 162, 11, 104, 142, 177, 134, 167, 135, 118, 158, 116, 107, 110, 197, 153, 148, 106, 156, 247, 190, 148, 146, 187, 128, 181, 145, 144 },
                            UserTypeId = 1,
                            Username = "editor1"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Zeynep",
                            LastName = "Kaya",
                            PasswordHash = new byte[] { 137, 158, 165, 199, 11, 117, 125, 202, 100, 132, 120, 19, 145, 150, 101, 144, 127, 228, 122, 112, 170, 196, 169, 126, 116, 181, 146, 183, 179, 151, 196, 118, 135, 235, 166, 227, 172, 143, 120, 122, 151, 191, 158, 123, 118, 171, 193, 132, 10, 188, 167, 106, 142, 136, 173, 149, 197, 184, 110, 195, 169, 175, 141, 115 },
                            PasswordSalt = new byte[] { 112, 15, 203, 179, 125, 186, 183, 189, 205, 119, 165, 183, 185, 214, 109, 130, 14, 105, 139, 164, 197, 153, 143, 194, 108, 196, 133, 127, 120, 173, 150, 101, 188, 154, 188, 11, 166, 162, 11, 104, 142, 177, 134, 167, 135, 118, 158, 116, 107, 110, 197, 153, 148, 106, 156, 247, 190, 148, 146, 187, 128, 181, 145, 144 },
                            UserTypeId = 1,
                            Username = "okur1"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Ali",
                            LastName = "Can",
                            PasswordHash = new byte[] { 137, 158, 165, 199, 11, 117, 125, 202, 100, 132, 120, 19, 145, 150, 101, 144, 127, 228, 122, 112, 170, 196, 169, 126, 116, 181, 146, 183, 179, 151, 196, 118, 135, 235, 166, 227, 172, 143, 120, 122, 151, 191, 158, 123, 118, 171, 193, 132, 10, 188, 167, 106, 142, 136, 173, 149, 197, 184, 110, 195, 169, 175, 141, 115 },
                            PasswordSalt = new byte[] { 112, 15, 203, 179, 125, 186, 183, 189, 205, 119, 165, 183, 185, 214, 109, 130, 14, 105, 139, 164, 197, 153, 143, 194, 108, 196, 133, 127, 120, 173, 150, 101, 188, 154, 188, 11, 166, 162, 11, 104, 142, 177, 134, 167, 135, 118, 158, 116, 107, 110, 197, 153, 148, 106, 156, 247, 190, 148, 146, 187, 128, 181, 145, 144 },
                            UserTypeId = 1,
                            Username = "okur2"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 179, 216, 171, 193, 165, 133, 133, 206, 149, 196, 175, 245, 193, 113, 198, 249, 166, 170, 119, 254, 136, 17, 166, 118, 143, 159, 102, 115, 130, 171, 241, 15, 148, 188, 121, 179, 191, 231, 103, 234, 191, 197, 168, 169, 143, 187, 127, 107, 172, 205, 242, 183, 110, 120, 131, 145, 158, 149, 135, 161, 11, 127, 109, 141 },
                            PasswordSalt = new byte[] { 185, 130, 16, 160, 161, 194, 238, 161, 146, 171, 139, 132, 188, 151, 164, 131, 183, 179, 149, 231, 18, 139, 11, 236, 206, 146, 246, 178, 207, 148, 19, 138, 119, 11, 158, 242, 166, 192, 149, 166, 181, 24, 10, 195, 210, 175, 231, 166, 139, 152, 131, 166, 18, 147, 168, 13, 159, 108, 125, 130, 178, 167, 140 },
                            UserTypeId = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Blog", b =>
                {
                    b.HasOne("BlogApp.Domain.Entities.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogApp.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BlogApp.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApp.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Like", b =>
                {
                    b.HasOne("BlogApp.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApp.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.SavedBlog", b =>
                {
                    b.HasOne("BlogApp.Domain.Entities.Blog", "Blog")
                        .WithMany("SavedBlogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApp.Domain.Entities.User", "User")
                        .WithMany("SavedBlogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.User", b =>
                {
                    b.HasOne("BlogApp.Domain.Entities.Role", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("SavedBlogs");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BlogApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("SavedBlogs");
                });
#pragma warning restore 612, 618
        }
    }
}
